### Maven:
<dependency>
    <groupId>org.dbunit</groupId>
    <artifactId>dbunit</artifactId>
    <version>2.7.3</version>
    <scope>test</scope>
</dependency>


### Gradle:
testImplementation("org.dbunit:dbunit:2.7.3")
---

### 1. XML-файл с тестовыми данными (`test-dataset.xml`):
<dataset>
    <users>
        <id>1</id>
        <username>john_doe</username>
        <email>john.doe@example.com</email>
        <age>25</age>
    </users>
    <users>
        <id>2</id>
        <username>jane_smith</username>
        <email>jane.smith@example.com</email>
        <age>30</age>
    </users>
</dataset>

- В этом датасете таблица называется `users` и содержит несколько тестовых пользователей.
  
---

### 2. Настройка и тест с использованием PostgreSQL

import org.dbunit.IDatabaseTester;
import org.dbunit.JdbcDatabaseTester;
import org.dbunit.dataset.IDataSet;
import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;
import org.dbunit.operation.DatabaseOperation;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class DbUnitPostgresTest {

    private IDatabaseTester databaseTester;

    @BeforeEach
    public void setUp() throws Exception {
        // Настройка DbUnit с параметрами подключения к PostgreSQL
        databaseTester = new JdbcDatabaseTester(
                "org.postgresql.Driver",                                 // JDBC-драйвер для PostgreSQL
                "jdbc:postgresql://localhost:5432/testdb",              // URL вашего тестового PostgreSQL
                "testuser",                                             // Тестовый пользователь
                "testpassword"                                          // Пароль
        );

        // Подключение XML с тестовыми данными
        IDataSet dataSet = new FlatXmlDataSetBuilder()
                .build(getClass().getClassLoader().getResourceAsStream("test-dataset.xml"));

        // Очистка таблицы и вставка данных перед тестами
        databaseTester.setDataSet(dataSet);
        databaseTester.setSetUpOperation(DatabaseOperation.CLEAN_INSERT);
        databaseTester.onSetup();
    }

    @Test
    public void testUsersCount() throws Exception {
        // Подключаемся к PostgreSQL
        Connection connection = DriverManager.getConnection(
                "jdbc:postgresql://localhost:5432/testdb", "testuser", "testpassword");

        // Выполняем SQL-запрос, чтобы проверить количество записей в таблице
        PreparedStatement statement = connection.prepareStatement("SELECT COUNT(*) FROM users");
        ResultSet resultSet = statement.executeQuery();

        // Проверяем, сколько строк в таблице
        resultSet.next();
        int count = resultSet.getInt(1);
        assertEquals(2, count, "Должно быть 2 записи в таблице users");

        resultSet.close();
        statement.close();
        connection.close();
    }

    @Test
    public void testUserDataIntegrity() throws Exception {
        // Проверяем конкретные данные для пользователя из таблицы
        Connection connection = DriverManager.getConnection(
                "jdbc:postgresql://localhost:5432/testdb", "testuser", "testpassword");

        PreparedStatement statement = connection.prepareStatement("SELECT * FROM users WHERE id = ?");
        statement.setInt(1, 1);

        ResultSet resultSet = statement.executeQuery();

        // Проверяем первый тестовый пользователь
        if (resultSet.next()) {
            assertEquals("john_doe", resultSet.getString("username"));
            assertEquals("john.doe@example.com", resultSet.getString("email"));
            assertEquals(25, resultSet.getInt("age"));
        }

        resultSet.close();
        statement.close();
        connection.close();
    }
}


---

### 3. Объяснение:
1. Структура базы данных:
   - Таблица `users` содержит столбцы: `id`, `username`, `email`, `age
2. Параметры PostgreSQL:
   - Замените `localhost:5432/testdb`, `testuser` и `testpassword` на свои параметры.
3. XML Dataset:
   - XML-файл `test-dataset.xml` указывает значения, которые будут вставлены в таблицу `users`.
4. DbUnit операции:
   - `CLEAN_INSERT`: очищает таблицу (удаляет все записи) и загружает новые данные.
5. Тесты:
   - Первый тест проверяет общее количество записей в таблице.
   - Второй тест проверяет целостность записи в таблице (по значениям).

---

### 4. Как подготовить PostgreSQL для тестирования:
1. Создайте новую базу данных `testdb` (или любую другую).
2. Создайте пользователя `testuser` с паролем `testpassword` и выдайте права на базу:
   
   CREATE USER testuser WITH PASSWORD 'testpassword';
   CREATE DATABASE testdb;
   GRANT ALL PRIVILEGES ON DATABASE testdb TO testuser;
   
3. Создайте таблицу `users` с нужной структурой:
   
   CREATE TABLE users (
       id SERIAL PRIMARY KEY,
       username VARCHAR(50) NOT NULL,
       email VARCHAR(100) NOT NULL,
       age INT NOT NULL
   );
   

---

### Итог:
Этот пример показывает, как настроить и использовать DbUnit вместе с PostgreSQL для тестирования реального взаимодействия с базой данных. Вы можете легко адаптировать данный код и датасеты для вашего проекта.
