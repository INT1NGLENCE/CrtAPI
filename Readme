Для Maven:
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-test</artifactId>
    <scope>test</scope>
    <exclusions>
        <exclusion>
            <groupId>org.junit.vintage</groupId>
            <artifactId>junit-vintage-engine</artifactId>
        </exclusion>
    </exclusions>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>
<dependency>
    <groupId>com.h2database</groupId>
    <artifactId>h2</artifactId>
    <scope>test</scope>
</dependency>


Для Gradle:
dependencies {
    testImplementation 'org.springframework.boot:spring-boot-starter-test' {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation 'com.h2database:h2'
}


Предположим, что у нас есть сущность `User`, для которой мы хотим протестировать CRUD-операции с использованием нашего JPA-репозитория.

### Пример сущности `User`:
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String email;

    // Конструкторы, геттеры и сеттеры
    public User() {}
    public User(String name, String email) {
        this.name = name;
        this.email = email;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
}


### Репозиторий:
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<User, Long> {
    // Дополнительные запросы (если нужны)
    User findByEmail(String email);
}


### Пример JPA-теста:
Теперь давайте создадим тест с использованием аннотации `@DataJpaTest` для тестирования взаимодействий с репозиторием. 

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import static org.assertj.core.api.Assertions.assertThat;

import java.util.Optional;

@DataJpaTest
class UserRepositoryTest {

    @Autowired
    private UserRepository userRepository;

    @Test
    void testSaveAndFindUser() {
        // Создаем нового пользователя
        User user = new User("John Doe", "john.doe@example.com");
        User savedUser = userRepository.save(user);

        // Проверяем, что пользователь сохранен
        assertThat(savedUser.getId()).isNotNull();
        assertThat(savedUser.getName()).isEqualTo("John Doe");

        // Ищем пользователя по ID
        Optional<User> foundUser = userRepository.findById(savedUser.getId());
        assertThat(foundUser).isPresent();
        assertThat(foundUser.get().getEmail()).isEqualTo("john.doe@example.com");
    }

    @Test
    void testFindByEmail() {
        // Сохраняем пользователя
        User user = new User("Jane Roe", "jane.roe@example.com");
        userRepository.save(user);

        // Ищем пользователя по email
        User foundUser = userRepository.findByEmail("jane.roe@example.com");

        assertThat(foundUser).isNotNull();
        assertThat(foundUser.getName()).isEqualTo("Jane Roe");
    }

    @Test
    void testDeleteUser() {
        // Сохраняем пользователя
        User user = new User("Alex Smith", "alex.smith@example.com");
        User savedUser = userRepository.save(user);

        // Удаляем пользователя
        userRepository.delete(savedUser);

        // Проверяем, что пользователь удален
        Optional<User> deletedUser = userRepository.findById(savedUser.getId());
        assertThat(deletedUser).isEmpty();
    }
}

